// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 
// Global Data Header File
// 
// Generated by KPP-3.0.0 symbolic chemistry Kinetics PreProcessor
//       (https:/github.com/KineticPreProcessor/KPP
// KPP is distributed under GPL, the general public licence
//       (http://www.gnu.org/copyleft/gpl.html)
// (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa
// (C) 1997-2022, A. Sandu, Michigan Tech, Virginia Tech
//     With important contributions from:
//        M. Damian,   Villanova University, Philadelphia, PA, USA
//        R. Sander,   Max-Planck Institute for Chemistry, Mainz, Germany
//        M. Long,     Renaissance Fiber, LLC, North Carolina, USA
//        H. Lin,      Harvard University, Cambridge, MA, USA
//        R. Yantosca, Harvard University, Cambridge, MA, USA
// 
// File                 : chem_Global.h
// Equation file        : chem.kpp
// Output root filename : chem
// 
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




// Declaration of global variables

extern double C[NSPEC];                         /* Concentration of all species */
  extern double * VAR;
  extern double * FIX;
extern double RCONST[NREACT];                   /* Rate constants (global) */
extern double TIME;                             /* Current integration time */
extern double SUN;                              /* Sunlight intensity between [0,1] */
extern double TEMP;                             /* Temperature */

extern double TSTART;                           /* Integration start time */
extern double TEND;                             /* Integration end time */
extern double DT;                               /* Integration step */
extern double ATOL[NVAR];                       /* Absolute tolerance */
extern double RTOL[NVAR];                       /* Relative tolerance */
extern double STEPMIN;                          /* Lower bound for integration step */
extern double STEPMAX;                          /* Upper bound for integration step */
extern double CFACTOR;                          /* Conversion factor for concentration units */
extern int LOOKAT[NLOOKAT];                     /* Indexes of species to look at */
extern int MONITOR[NMONITOR];                   /* Indexes of species to monitor */
extern char * SPC_NAMES[NSPEC];                 /* Names of chemical species */
extern char * SMASS[NMASS];                     /* Names of atoms for mass balance */
extern char * EQN_NAMES[NREACT];                /* Equation names */
extern char * EQN_TAGS[NREACT];                 /* Equation tags */
extern char * FAM_NAMES[NFAM];                  /* Names of chemical familes */

// INLINED global variable declarations


extern double ko3p_o2_M, ko3p_o3, ko1d_o2, ko1d_o3, ko1d_h2, ko1d_h2o,		\
							ko1d_n2, ko1d_n2_2, ko1d_n2o, ko1d_ch4, ko1d_co2, ko1d_ccl3f,		\
							ko1d_ccl2f2, ko1d_cclf3, ko3p_oh, ko3p_ho2, ko3p_h2o2, kh_o2_M, 		\
							kh_o3, kh_ho2, kh_ho2_2, kh_ho2_3, koh_o3, koh_oh, koh_oh_M,		\
							koh_ho2, koh_h2o2, koh_co, kho2_o3, kho2_ho2,		\
							ko2_hv, ko3_hv1, ko3_hv2, kho2_hv, kh2o_hv, kh2o2_hv, kn2o_hv,		\
							kccl3f_hv, kcl2f2_hv;

#pragma omp threadprivate(ko3p_o2_M, ko3p_o3, ko1d_o2, ko1d_o3, ko1d_h2, ko1d_h2o,		\
													ko1d_n2, ko1d_n2_2, ko1d_n2o, ko1d_ch4, ko1d_co2, ko1d_ccl3f,		\
													ko1d_ccl2f2, ko1d_cclf3, ko3p_oh, ko3p_ho2, ko3p_h2o2, kh_o2_M, 		\
													kh_o3, kh_ho2, kh_ho2_2, kh_ho2_3, koh_o3, koh_oh, koh_oh_M,		\
													koh_ho2, koh_h2o2, kho2_o3, kho2_ho2,		\
													ko2_hv, ko3_hv1, ko3_hv2, kho2_hv, kh2o_hv, kh2o2_hv, kn2o_hv,		\
													kccl3f_hv, kcl2f2_hv,		\
													RCONST,RTOL,ATOL,STEPMIN,VAR,FIX,TEMP)
									
#define SET_VAR(ind_spec, qnt_index) 			\
	if (qnt_index >= 0) 				\
		VAR[ind_spec] = atm->q[qnt_index][ip]; 

#define VAR2atm(ind_spec, qnt_index)			\
	if (qnt_index >= 0) 				\
		atm->q[qnt_index][ip] = VAR[ind_spec];	

/*Roeth-Approximation Formula for photolysis reactions. (Ref: CLaMS chem.wiki) */
#define roeth_photol(a, b, c, sza) 				\
	(c*sza < M_PI/2 ? a * exp(b * (1 - 1/cos(c * sza))) : 0)

#define INIT_CQNT(qnt_index, climptr_varname) 			\
	if (qnt_index >= 0) 			\
		atm->q[qnt_index][ip] = 			\
			clim_var(clim, atm->time[ip], atm->lat[ip], atm->p[ip], climptr_varname);
	

// INLINED global variable declarations

