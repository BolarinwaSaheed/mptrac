// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// 
// Log File with Human-Readable Information
// 
// Generated by KPP-3.0.0 symbolic chemistry Kinetics PreProcessor
//       (https:/github.com/KineticPreProcessor/KPP
// KPP is distributed under GPL, the general public licence
//       (http://www.gnu.org/copyleft/gpl.html)
// (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa
// (C) 1997-2022, A. Sandu, Michigan Tech, Virginia Tech
//     With important contributions from:
//        M. Damian,   Villanova University, Philadelphia, PA, USA
//        R. Sander,   Max-Planck Institute for Chemistry, Mainz, Germany
//        M. Long,     Renaissance Fiber, LLC, North Carolina, USA
//        H. Lin,      Harvard University, Cambridge, MA, USA
//        R. Yantosca, Harvard University, Cambridge, MA, USA
// 
// File                 : chem.log
// Equation file        : chem.kpp
// Output root filename : chem
// 
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



### Options -------------------------------------------

#DECLARE      - OFF
#DOUBLE       - ON
#DRIVER       - none
#DUMMYINDEX   - OFF
#EQNTAGS      - OFF
#FUNCTION     - AGGREGATE
#HESSIAN      - ON
#INTEGRATOR   - rosenbrock
#JACOBIAN     - SPARSE_LU_ROW
#LANGUAGE     - C
#MEX          - OFF
#MINVERSION   - none
#REORDER      - ON
#STOCHASTIC   - OFF
#STOICMAT     - ON
#UPPERCASEF90 - OFF

### Parameters ----------------------------------------

#define NSPEC                5           /* Number of chemical species */
#define NVAR                 3           /* Number of Variable species */
#define NVARACT              2           /* Number of Active species */
#define NFIX                 2           /* Number of Fixed species */
#define NREACT               3           /* Number of reactions */
#define NVARST               0           /* Starting of variables in conc. vect. */
#define NFIXST               3           /* Starting of fixed in conc. vect. */

### Species -------------------------------------------

Variable species
   1 = SO4 (n)                   3 = SO2 (r)                
   2 = H2O2 (r)               

Fixed species
   1 = OH (r)                    2 = HO2 (r)                

### Subroutines ---------------------------------------

void Fun( 
  double V[NVAR],                        /* Concentrations of variable species (local) */
  double F[NFIX],                        /* Concentrations of fixed species (local) */
  double RCT[NREACT],                    /* Rate constants (local) */
  double Vdot[NVAR],                     /* Time derivative of variable species concentrations */
  double Aout[NREACT]                    /* Optional argument to return equation rate constants */
)void Fun_SPLIT( 
  double V[NVAR],                        /* Concentrations of variable species (local) */
  double F[NFIX],                        /* Concentrations of fixed species (local) */
  double RCT[NREACT],                    /* Rate constants (local) */
  double Vdot[NVAR],                     /* Time derivative of variable species concentrations */
  double P_VAR[NVAR],                    /* Production term */
  double D_VAR[NVAR],                    /* Destruction term */
  double Aout[NREACT]                    /* Optional argument to return equation rate constants */
)void CalcStoichNum( 
  double StoichNum[NVAR][NREACT]         /* Stoichiometric numbers */
)void Jac_SP( 
  double V[NVAR],                        /* Concentrations of variable species (local) */
  double F[NFIX],                        /* Concentrations of fixed species (local) */
  double RCT[NREACT],                    /* Rate constants (local) */
  double JVS[LU_NONZERO]                 /* sparse Jacobian of variables */
)void Jac_SP_Vec( 
  double JVS[LU_NONZERO],                /* sparse Jacobian of variables */
  double UV[NVAR],                       /* User vector for variables */
  double JUV[NVAR]                       /* Jacobian times user vector */
)void JacTR_SP_Vec( 
  double JVS[LU_NONZERO],                /* sparse Jacobian of variables */
  double UV[NVAR],                       /* User vector for variables */
  double JTUV[NVAR]                      /* Jacobian transposed times user vector */
)void KppSolve( 
  double JVS[LU_NONZERO],                /* sparse Jacobian of variables */
  double X[NVAR]                         /* Vector for variables */
)void KppSolveTR( 
  double JVS[LU_NONZERO],                /* sparse Jacobian of variables */
  double X[NVAR],                        /* Vector for variables */
  double XX[NVAR]                        /* Vector for output variables */
)void Hessian( 
  double V[NVAR],                        /* Concentrations of variable species (local) */
  double F[NFIX],                        /* Concentrations of fixed species (local) */
  double RCT[NREACT],                    /* Rate constants (local) */
  double HESS[NHESS]                     /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
)void HessTR_Vec( 
  double HESS[NHESS],                    /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
  double U1[NVAR],                       /* User vector */
  double U2[NVAR],                       /* User vector */
  double HTU[NVAR]                       /* Transposed Hessian times user vectors: (Hess x U2)^T * U1 = [d (Jac^T*U1)/d Var] * U2  */
)void Hess_Vec( 
  double HESS[NHESS],                    /* Hessian of Var (i.e. the 3-tensor d Jac / d Var) */
  double U1[NVAR],                       /* User vector */
  double U2[NVAR],                       /* User vector */
  double HU[NVAR]                        /* Hessian times user vectors: (Hess x U2) * U1 = [d (Jac*U1)/d Var] * U2 */
)void Initialize( 
)void Shuffle_user2kpp( 
  double V_USER[NVAR],                   /* Concentration of variable species in USER's order */
  double V[NVAR]                         /* Concentrations of variable species (local) */
)void Shuffle_kpp2user( 
  double V[NVAR],                        /* Concentrations of variable species (local) */
  double V_USER[NVAR]                    /* Concentration of variable species in USER's order */
)void Update_RCONST( 
)void Update_PHOTO( 
)void GetMass( 
  double CL[NSPEC],                      /* Concentration of all species (local) */
  double Mass[1]                         /* value of mass balance */
)void ReactantProd( 
  double V[NVAR],                        /* Concentrations of variable species (local) */
  double F[NFIX],                        /* Concentrations of fixed species (local) */
  double ARP[NREACT]                     /* Reactant product in each equation */
)void JacReactantProd( 
  double V[NVAR],                        /* Concentrations of variable species (local) */
  double F[NFIX],                        /* Concentrations of fixed species (local) */
  double JVRP[NJVRP]                     /* d ARP(1:NREACT)/d VAR (1:NVAR) */
)